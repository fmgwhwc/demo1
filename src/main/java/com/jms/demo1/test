package com.dssp.profile.model;

import java.io.Serializable;
import java.util.Date;
/**
 * 
 *@author GFM
 *@date 2017年10月16日
 *@description 车辆销售实体
 */
public class VhlSaleModel implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * 车辆销售记录id
	 */
	private String  id;
	/**
	 * 车架号
	 */
	private String vin;
	/**
	 * 客户姓名（车主）
	 */
	private String customerName;
	/**
	 * 客户证件类型
	 */
	private String credentials;
	/**
	 * 客户证件号码
	 */
	private String credentialsNum;
	/**
	 * 客户性别
	 */
	private String customerSex;
	/**
	 * 客户手机号码
	 */
	private String customerMobilePhone;
	/**
	 * 客户座机电话
	 */
	private String customerHomePhone;
	/**
	 * 客户邮箱
	 */
	private String customerEmail;
	/**
	 * 车辆颜色
	 */
	private String vhlColor;
	/**
	 * 车牌号
	 */
	private String vhlLience;
	/**
	 * 备注
	 */
	private String remark;
	/**
	 * 车辆状态
	 */
	private String vhlStatus;
	/**
	 * 服务等级id
	 */
	private String serviceLevelId;
	/**
	 * 保险公司
	 */
	private String insruanceCompany;
	/**
	 * 保单号
	 */
	private String insruanceNum;
	/**
	 * 保险到期日
	 */
	private Date dueDate;
	/**
	 * 销售时间
	 */
	private Date saleDate;
	/**
	 * 记录状态
	 */
	private String recordStatus;
	/**
	 * 创建时间
	 */
	private Date CreateTime;
	/**
	 * 最后更新时间
	 */
	private Date updateTime;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getVin() {
		return vin;
	}
	public void setVin(String vin) {
		this.vin = vin;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public String getCredentials() {
		return credentials;
	}
	public void setCredentials(String credentials) {
		this.credentials = credentials;
	}
	public String getCredentialsNum() {
		return credentialsNum;
	}
	public void setCredentialsNum(String credentialsNum) {
		this.credentialsNum = credentialsNum;
	}
	public String getCustomerSex() {
		return customerSex;
	}
	public void setCustomerSex(String customerSex) {
		this.customerSex = customerSex;
	}
	public String getCustomerMobilePhone() {
		return customerMobilePhone;
	}
	public void setCustomerMobilePhone(String customerMobilePhone) {
		this.customerMobilePhone = customerMobilePhone;
	}
	public String getCustomerHomePhone() {
		return customerHomePhone;
	}
	public void setCustomerHomePhone(String customerHomePhone) {
		this.customerHomePhone = customerHomePhone;
	}
	public String getCustomerEmail() {
		return customerEmail;
	}
	public void setCustomerEmail(String customerEmail) {
		this.customerEmail = customerEmail;
	}
	public String getVhlColor() {
		return vhlColor;
	}
	public void setVhlColor(String vhlColor) {
		this.vhlColor = vhlColor;
	}
	public String getVhlLience() {
		return vhlLience;
	}
	public void setVhlLience(String vhlLience) {
		this.vhlLience = vhlLience;
	}
	public String getRemark() {
		return remark;
	}
	public void setRemark(String remark) {
		this.remark = remark;
	}
	public String getVhlStatus() {
		return vhlStatus;
	}
	public void setVhlStatus(String vhlStatus) {
		this.vhlStatus = vhlStatus;
	}
	public String getServiceLevelId() {
		return serviceLevelId;
	}
	public void setServiceLevelId(String serviceLevelId) {
		this.serviceLevelId = serviceLevelId;
	}
	public String getInsruanceCompany() {
		return insruanceCompany;
	}
	public void setInsruanceCompany(String insruanceCompany) {
		this.insruanceCompany = insruanceCompany;
	}
	public String getInsruanceNum() {
		return insruanceNum;
	}
	public void setInsruanceNum(String insruanceNum) {
		this.insruanceNum = insruanceNum;
	}
	public Date getDueDate() {
		return dueDate;
	}
	public void setDueDate(Date dueDate) {
		this.dueDate = dueDate;
	}
	public Date getSaleDate() {
		return saleDate;
	}
	public void setSaleDate(Date saleDate) {
		this.saleDate = saleDate;
	}
	public String getRecordStatus() {
		return recordStatus;
	}
	public void setRecordStatus(String recordStatus) {
		this.recordStatus = recordStatus;
	}
	public Date getCreateTime() {
		return CreateTime;
	}
	public void setCreateTime(Date createTime) {
		CreateTime = createTime;
	}
	public Date getUpdateTime() {
		return updateTime;
	}
	public void setUpdateTime(Date updateTime) {
		this.updateTime = updateTime;
	}
	
	
	
	
	
	
	<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 系统事件sql语句配置 -->
<mapper namespace="com.cmsz.security.dao.SystemEventDao">

	<sql id="allSql">
		grade,time,user,loginip,type
	</sql>
	<!-- 插入数据 -->
	<insert id="addSystemEvent" parameterType="SystemEventModel">
		insert into system_event(
		<include refid="allSql" />
		) values(#{grade},#{time},#{user},#{loginip},#{type})
	</insert>
	<!-- 查询数据 -->
	<select id="selectSystemEvent" parameterType="SystemEventModel"
		resultType="SystemEventModel">
		select count(1) as count,from_unixtime(time/1000,#{timeStamp}) as
		timeStamp from system_event
		<where>
			<if test="grade !=null">
				and grade=#{grade}
			</if>
			<if test='startTime>0'>
				and time &gt;= #{startTime}
			</if>
			<if test='endTime>0'>
				and time &lt; #{endTime}
			</if>
		</where>
		group by FROM_UNIXTIME(time/1000,#{timeStamp})
	</select>
</mapper>
	
	
	
	
	<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cmsz.security.dao.UserDao">
    <!--查询用户记录数-->
	<select id="userCount" parameterType="UserModel" resultType="Integer">
		SELECT count(*)
		FROM user u,role r
		<trim prefix="WHERE" prefixOverrides="AND"> 
			<if test="fullName != null">
				fullName like '%${fullName}%'
			</if>
			<if test="roleCode != null">
				AND u.roleCode=#{roleCode}
			</if>
			<if test="email != null">
				AND email like '%${email}%'
			</if>
			AND r.roleCode = u.roleCode
			AND r.roleCode != 'sa'
			AND u.state = 1
		</trim>
	</select>
	<!--用户姓名检测-->
	<select id="userNameCheck" parameterType="UserModel" resultType="Integer">
		SELECT count(*)
		FROM user
		<trim prefix="WHERE" prefixOverrides="AND"> 
			<if test="userName != null">
				userName=#{userName}
			</if>
		</trim>
	</select>
	
	<!--用户邮箱检测-->
	<select id="userEmailCheck" parameterType="UserModel" resultType="Integer">
		SELECT count(*)
		FROM user
		<trim prefix="WHERE" prefixOverrides="AND"> 
			<if test="email != null">
				email=#{email}
			</if>
		</trim>
	</select>

	<!--查询所有用户-->
	<select id="userQueryAll" resultType="UserModel" parameterType="UserCommand">
		SELECT 
		    u.id id,
			userName,
			r.roleSystem system,
			fullName,
			gender,
			phone,
			email,
			u.createDate createDate,
			expiredDate,
			section,
			r.roleType roleType,
			u.roleCode roleCode,
			r.roleName roleName
		FROM user u,role r
		<trim prefix="WHERE" prefixOverrides="AND"> 
			r.roleCode = u.roleCode
			AND r.roleCode != 'sa'
			AND u.state = 1
			<if test="roleType != null">
			AND r.roleType=#{roleType}
			</if>
			<if test="roleSystem != null">
			AND r.roleSystem=#{roleSystem}
			</if>
		</trim>
	</select>
	
	<!--查询用户-->
	<select id="userQuery" parameterType="Map" resultType="UserModel">
		SELECT 
		    u.id id,
			userName,
			fullName,
			gender,
			r.roleSystem system,
			phone,
			email,
			u.createDate createDate,
			expiredDate,
			section,
			r.roleType roleType,
			u.roleCode roleCode,
			r.roleName roleName
		FROM user u,role r
		<trim prefix="WHERE" prefixOverrides="AND"> 
			<if test="fullName != null">
				fullName like '%${fullName}%'
			</if>
			<if test="roleCode != null">
				AND u.roleCode=#{roleCode}
			</if>
			<if test="email != null">
				AND email like '%${email}%'
			</if>
			AND r.roleCode = u.roleCode
			AND r.roleCode != 'sa'
			AND u.state = 1
		</trim>
		order by u.id desc
		limit #{currentPage},#{pageSize}
		
	</select>
	<!--查询单个用户对象-->
	<select id="userQueryObject" parameterType="UserModel" resultType="UserModel">
		SELECT 
		    u.id id,
		    r.roleSystem system,
			userName,
			fullName,
			gender,
			phone,
			email,
			u.createDate createDate,
			expiredDate,
			section,
			password,
			r.roleType roleType,
			u.roleCode roleCode,
			r.roleName roleName
		FROM user u,role r
		<trim prefix="WHERE" prefixOverrides="AND"> 
			<if test="userName != null">
				userName=#{userName}
			</if>
			    AND r.roleCode = u.roleCode
			    AND u.state = 1
		</trim>
	</select>
	<!--修改用户-->
	<update id="userUpdate" parameterType="UserModel">
		UPDATE user 
		<trim prefix="set" suffixOverrides=","> 
			<if test="fullName != null">
				fullName=#{fullName},
			</if>
			<if test="roleCode != null">
				roleCode=#{roleCode},
			</if>
			<if test="phone != null">
				phone=#{phone},
			</if>
			<if test="password != null">
				password=#{password},
			</if>
			<if test="email != null">
				email=#{email},
			</if>
			<if test="gender != null">
				gender=#{gender},
			</if>
			<if test="section != null">
				section=#{section},
			</if>
			<if test="expiredDate != null">
				expiredDate=#{expiredDate}
			</if>
			<if test="state != null">
				state=#{state}
			</if>
		</trim>
	    <trim prefix="WHERE" prefixOverrides="AND"> 
			<if test="userName != null">
				userName=#{userName}
			</if>
		</trim>  
	</update>
	<!--删除用户-->
	<delete id="userDeletion" parameterType="UserModel">
			UPDATE user 
		<trim prefix="set" suffixOverrides=","> 
			<if test="state != null">
				state=#{state}
			</if>
		</trim>
	    <trim prefix="WHERE" prefixOverrides="AND"> 
			<if test="userName != null">
				userName=#{userName}
			</if>
			<if test="roleCode != null">
				AND roleCode=#{roleCode}
			</if>
		</trim>  
	</delete>
	<!--添加用户-->
	<insert id="userAddition" parameterType="UserModel">
		insert
		into
		user
		<trim prefix="(" suffix=")" suffixOverrides="," >
			<if test="userName != null">
				userName,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="fullName != null">
				fullName,
			</if>
			<if test="gender != null">
				gender,
			</if>
			<if test="roleCode != null">
				roleCode,
			</if>
			<if test="phone != null">
				phone,
			</if>
			<if test="email != null">
				email,
			</if>
			<if test="section != null">
				section,
			</if>
			<if test="createDate != null">
				createDate,
			</if>
			<if test="expiredDate != null">
				expiredDate
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="userName != null">
				#{userName},
			</if>
			<if test="password != null">
				#{password},
			</if>
			<if test="fullName != null">
				#{fullName},
			</if>
			<if test="gender != null">
				#{gender},
			</if>
			<if test="roleCode != null">
				#{roleCode},
			</if>
			<if test="phone != null">
				#{phone},
			</if>
			<if test="email != null">
				#{email},
			</if>
			<if test="section != null">
				#{section},
			</if>
			<if test="createDate != null">
				#{createDate},
			</if>
			<if test="expiredDate != null">
				#{expiredDate}
			</if>
		</trim>
	</insert>
</mapper>




	
	
	
	
	
	
	
	
	

}
